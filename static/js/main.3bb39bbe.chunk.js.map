{"version":3,"sources":["Task.js","TaskCol.js","Pomodoro.js","TimerModal.js","App.js","index.js"],"names":["Task","props","addTask","deleteTask","moveTask","task","useState","urgency","urgencyLevel","setUrgencyLevel","isCollapsed","collapsed","setCollapsed","formAction","setFormAction","Container","className","Row","Col","xs","title","Accordion","defaultActiveKey","Item","eventKey","Header","Body","description","Form","onSubmit","event","preventDefault","console","log","target","newTask","id","elements","value","status","Control","type","placeholder","name","as","rows","Select","onChange","options","selectedIndex","ButtonGroup","Button","onClick","size","variant","newStatus","TaskCol","taskList","tasksForStatus","tasks","addEmptyTask","filter","map","OverlayTrigger","placement","overlay","Tooltip","Pomodoro","minutes","setMinutes","seconds","setSeconds","breakTime","setBreakTime","start","setStart","displayMessage","setDisplayMessage","useEffect","interval","setInterval","clearInterval","timerMinutes","timerSeconds","session","break","isNaN","sm","Floating","htmlFor","setTimeout","TimerModal","show","setShow","handleClose","icon","faStopwatch","Modal","onHide","closeButton","Title","Footer","App","setTasks","lastTask","length","newTaskId","undefined","taskToAdd","filteredTasks","newTaskList","saveTasksToLocalStorage","taskId","localStorage","setItem","JSON","stringify","loadedTasks","getItem","parse","loadTasksFromLocalStorage","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3bb39bbe.chunk.js","sourcesContent":["import { useState } from \"react\";\n//import \"./styles/task.scss\";\nimport { Container, Row, Col, Button, Form, ButtonGroup, Accordion } from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nexport default function Task(props) {\n    const { addTask, deleteTask, moveTask, task } = props;\n\n    const [urgencyLevel, setUrgencyLevel] = useState(task.urgency);\n    const [collapsed, setCollapsed] = useState(task.isCollapsed);\n    const [formAction, setFormAction] = useState(\"\");\n\n    function setUrgency(event) {\n        //setUrgencyLevel(event.target.attributes.urgency.value);\n        setUrgencyLevel(event.target.options[event.target.options.selectedIndex].value);\n        //console.log(event.target.options[event.target.options.selectedIndex].value);\n    }\n\n    function handleSubmit(event) {\n        event.preventDefault();\n        console.log(event.target);\n        if (formAction === \"save\") {\n            if (collapsed) {\n                setCollapsed(false);\n            } else {\n                //console.log(event.target.elements.title);\n                let newTask = {\n                    id: task.id,\n                    title: event.target.elements.title.value,\n                    description: event.target.elements.description.value,\n                    urgency: urgencyLevel,\n                    status: task.status,\n                    isCollapsed: true,\n                };\n\n                addTask(newTask);\n                setCollapsed(true);\n\n            }\n        }\n\n        if (formAction === \"delete\") {\n            deleteTask(task.id);\n        }\n    }\n\n    function handleMoveLeft() {\n        let newStatus = \"\";\n\n        if (task.status === \"In Progress\") {\n            newStatus = \"Backlog\";\n        } else if (task.status === \"Complete\") {\n            newStatus = \"In Progress\";\n        }\n\n        if (newStatus !== \"\") {\n            moveTask(task.id, newStatus);\n        }\n    }\n\n    function handleMoveRight() {\n        let newStatus = \"\";\n\n        if (task.status === \"Backlog\") {\n            newStatus = \"In Progress\";\n        } else if (task.status === \"In Progress\") {\n            newStatus = \"Complete\";\n        }\n\n        if (newStatus !== \"\") {\n            moveTask(task.id, newStatus);\n        }\n    }\n\n    return (\n        <Container className={`task mb-2 ${collapsed ? \"collapsedTask\" : \"\"}`}>\n            <Row className=\"mt-2 mb-3\">\n                <Col xs={12}>\n                    <h4 className=\"task-title\">{task.title}</h4>\n                    <Accordion defaultActiveKey=\"0\" className={`${!collapsed ? \"hidden\" : \"\"}`}>\n                        <Accordion.Item eventKey=\"0\">\n                            <Accordion.Header>Details</Accordion.Header>\n                            <Accordion.Body>\n                                Priority: {task.urgency} \n                                <br></br>\n                                Description: {task.description}\n                            </Accordion.Body>\n                        </Accordion.Item>\n                    </Accordion>\n                </Col>\n                <Col xs={12}>\n                    <Form onSubmit={handleSubmit} className={collapsed ? \"collapsed\" : \"\"}>\n                        <Form.Control\n                            type=\"text\"\n                            className={`title input ${collapsed ? \"hidden\" : \"\"}`}\n                            placeholder=\"Task Title..\"\n                            name=\"title\"\n                        />\n                        <Form.Control\n                            as=\"textarea\"\n                            className={`title input ${collapsed ? \"hidden\" : \"\"}`}\n                            placeholder=\"Task Description..\"\n                            rows={2}\n                            name=\"description\"\n                        />\n                        <Form.Select onChange={setUrgency} name=\"urgency\" className={`${collapsed ? \"hidden\" : \"\"}`} aria-label=\"Default select example\">\n                            <option>Task Priority..</option>\n                            <option value=\"Low\">Low</option>\n                            <option value=\"Medium\">Medium</option>\n                            <option value=\"High\">High</option>\n                        </Form.Select>\n                        <ButtonGroup>\n                            <Button\n                                onClick={() => {\n                                    setFormAction(\"save\");\n                                }}\n                                className=\"button mt-1 mr-2\"\n                                type=\"submit\"\n                                size=\"sm\"\n                                variant=\"primary\"\n                            >\n                                {collapsed ? \"Edit\" : \"Save\"}\n                            </Button>\n                            {collapsed && (\n                                <Button\n                                    onClick={() => {\n                                        setFormAction(\"delete\");\n                                    }}\n                                    className=\"delete mt-1\"\n                                    type=\"submit\"\n                                    size=\"sm\"\n                                    variant=\"primary\"\n                                >\n                                    Delete\n                                </Button>\n                            )}\n                        </ButtonGroup>\n                    </Form>\n                    {/*<Form onSubmit={handleSubmit} className={collapsed ? \"collapsed\" : \"\"}>\n                        <Row>\n                            <Col>\n                                <input\n                                    type=\"text\"\n                                    className={`title input ${collapsed ? \"hidden\" : \"\"}`}\n                                    name=\"title\"\n                                    placeholder=\"Enter Title\"\n                                    disabled={collapsed}\n                                    defaultValue={task.title}\n                                />\n                                <textarea\n                                    rows=\"2\"\n                                    className={`description input ${collapsed ? \"hidden\" : \"\"}`}\n                                    name=\"description\"\n                                    placeholder=\"Enter Description\"\n                                    defaultValue={task.description}\n                                />\n                            </Col>\n                            <div className={`urgencyLables ${collapsed ? \"hidden\" : \"\"}`}>\n                                <label className={`low ${urgencyLevel === \"low\" ? \"selected\" : \"\"}`}>\n                                    <input\n                                        urgency=\"low\"\n                                        onChange={setUrgency}\n                                        type=\"radio\"\n                                        name=\"urgency\"\n                                    />\n                                    low\n                                </label>\n                                <label\n                                    className={`medium ${urgencyLevel === \"medium\" ? \"selected\" : \"\"}`}\n                                >\n                                    <input\n                                        urgency=\"medium\"\n                                        onChange={setUrgency}\n                                        type=\"radio\"\n                                        name=\"urgency\"\n                                    />\n                                    medium\n                                </label>\n                                <label\n                                    className={`high ${urgencyLevel === \"high\" ? \"selected\" : \"\"}`}\n                                >\n                                    <input\n                                        urgency=\"high\"\n                                        onChange={setUrgency}\n                                        type=\"radio\"\n                                        name=\"urgency\"\n                                    />\n                                    high\n                                </label>\n                            </div>\n                            <Button\n                                onClick={() => {\n                                    setFormAction(\"save\");\n                                }}\n                                className=\"button mt-3\"\n                                type=\"submit\"\n                            >\n                                {collapsed ? \"Edit\" : \"Save\"}\n                            </Button>\n                            {collapsed && (\n                                <Button\n                                    onClick={() => {\n                                        setFormAction(\"delete\");\n                                    }}\n                                    className=\"button delete mt-3\"\n                                    type=\"submit\"\n                                >\n                                    X\n                                </Button>\n                            )}\n                        </Row>\n                                </Form>*/}\n                </Col>\n                <Col>\n                    <ButtonGroup>\n                        {collapsed && (\n                            <Button onClick={handleMoveLeft} size=\"sm\" className=\"button-lr moveTask mr-1 mt-1\" variant=\"secondary\">\n                                &#171;\n                            </Button>\n                        )}\n                        {collapsed && (\n                            <Button size=\"sm\" onClick={handleMoveRight} className=\"button-lr moveTask ml-1 mt-1\" variant=\"secondary\">\n                                &#187;\n                            </Button>\n                        )}\n                    </ButtonGroup>\n                </Col>\n            </Row>\n            {/*<div className={`task ${collapsed ? \"collapsedTask\" : \"\"}`}>\n                <button onClick={handleMoveLeft} className=\"button moveTask\">\n                    &#171;\n                </button>\n                <form onSubmit={handleSubmit} className={collapsed ? \"collapsed\" : \"\"}>\n                    <input\n                        type=\"text\"\n                        className=\"title input\"\n                        name=\"title\"\n                        placeholder=\"Enter Title\"\n                        disabled={collapsed}\n                        defaultValue={task.title}\n                    />\n                    <textarea\n                        rows=\"2\"\n                        className=\"description input\"\n                        name=\"description\"\n                        placeholder=\"Enter Description\"\n                        defaultValue={task.description}\n                    />\n                    <div className=\"urgencyLabels\">\n                        <label className={`low ${urgencyLevel === \"low\" ? \"selected\" : \"\"}`}>\n                            <input\n                                urgency=\"low\"\n                                onChange={setUrgency}\n                                type=\"radio\"\n                                name=\"urgency\"\n                            />\n                            low\n                        </label>\n                        <label\n                            className={`medium ${urgencyLevel === \"medium\" ? \"selected\" : \"\"}`}\n                        >\n                            <input\n                                urgency=\"medium\"\n                                onChange={setUrgency}\n                                type=\"radio\"\n                                name=\"urgency\"\n                            />\n                            medium\n                        </label>\n                        <label\n                            className={`high ${urgencyLevel === \"high\" ? \"selected\" : \"\"}`}\n                        >\n                            <input\n                                urgency=\"high\"\n                                onChange={setUrgency}\n                                type=\"radio\"\n                                name=\"urgency\"\n                            />\n                            high\n                        </label>\n                    </div>\n                    <button\n                        onClick={() => {\n                            setFormAction(\"save\");\n                        }}\n                        className=\"button\"\n                    >\n                        {collapsed ? \"Edit\" : \"Save\"}\n                    </button>\n                    {collapsed && (\n                        <button\n                            onClick={() => {\n                                setFormAction(\"delete\");\n                            }}\n                            className=\"button delete\"\n                        >\n                            X\n                        </button>\n                    )}\n                </form>\n                <button onClick={handleMoveRight} className=\"button moveTask\">\n                    &#187;\n                </button>\n            </div>*/}\n        </Container>\n    );\n}","import Task from \"./Task\";\n//import \"./styles/statusLine.scss\";\nimport { Button, OverlayTrigger, Tooltip } from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nexport default function TaskCol(props) {\n  const { status, tasks, addTask, deleteTask, addEmptyTask, moveTask } = props;\n\n  let taskList, tasksForStatus;\n\n  function handleAddEmpty() {\n    addEmptyTask(status);\n  }\n\n  if (tasks) {\n    tasksForStatus = tasks.filter((task) => {\n      return task.status === status;\n    });\n  }\n\n  if (tasksForStatus) {\n    taskList = tasksForStatus.map((task) => {\n      return (\n        <Task\n          addTask={(task) => addTask(task)}\n          deleteTask={(id) => deleteTask(id)}\n          moveTask={(id, status) => moveTask(id, status)}\n          key={task.id}\n          task={task}\n        />\n      );\n    });\n  }\n\n  return (\n    <div className=\"statusLine\">\n      <h3 className=\"status-title\">{status}</h3>\n      {taskList}\n      <OverlayTrigger placement=\"bottom\" overlay={<Tooltip id=\"tooltip-disabled\">Create New Task</Tooltip>}>\n        <Button onClick={handleAddEmpty} className=\"button addTask mt-1\">\n          +\n        </Button>\n      </OverlayTrigger>\n    </div >\n  );\n}","import React, { useState, useEffect, } from \"react\";\nimport {\n    Button,\n    Form,\n    ButtonGroup,\n    Col,\n    Row,\n    FloatingLabel\n} from 'react-bootstrap';\nimport \"./App.css\";\n\nexport default function Pomodoro() {\n    const [minutes, setMinutes] = useState(25)\n    const [seconds, setSeconds] = useState(0)\n    const [breakTime, setBreakTime] = useState(5)\n    const [start, setStart] = useState(false)\n    const [displayMessage, setDisplayMessage] = useState(false)\n\n\n    function handleSubmit(event) {\n        event.preventDefault();\n        let session = event.target.elements.session.value;\n        let breakTime = event.target.elements.break.value;\n\n        if (!isNaN(session) && session >= 1) {\n            setMinutes(session)\n        }\n        if (!isNaN(breakTime) && breakTime >= 1) {\n            setBreakTime(breakTime)\n        }\n    }\n\n    function handleReset() {\n        setStart(false);\n        setMinutes(25);\n        setDisplayMessage(false);\n        setTimeout(() => {\n            setSeconds(0);\n        }, 1005);\n    }\n    function handleStart() {\n        setStart(true);\n    }\n\n    useEffect(() => {\n        let interval = setInterval(() => {\n            if (start) {\n                clearInterval(interval)\n\n                if (seconds === 0) {\n                    if (minutes !== 0) {\n                        setSeconds(59)\n                        setMinutes(minutes - 1)\n                    } else {\n                        let minutes = displayMessage ? minutes - 1 : breakTime - 1\n                        let seconds = 59\n\n                        setSeconds(seconds)\n                        setMinutes(minutes)\n                        setDisplayMessage(!displayMessage)\n                    }\n                } else {\n                    setSeconds(seconds - 1)\n                }\n            }\n        }, 1000)\n    }, [seconds, start])\n\n    const timerMinutes = minutes < 10 ? `0${minutes}` : minutes\n    const timerSeconds = seconds < 10 ? `0${seconds}` : seconds\n\n    return (\n        <>\n            <div className=\"pomodoro\">\n                <div className=\"message\">\n                    {displayMessage && <div>Time for a break, good job!</div>}\n                    {displayMessage && <div>New session starts in:</div>}\n                </div>\n                <div className=\"timer\">\n                    {timerMinutes}:{timerSeconds}\n                </div>\n            </div>\n            <Form onSubmit={handleSubmit}>\n                <Row className=\"justify-content-md-center\">\n                    <Col sm={8} className=\"justify-content-center\">\n                        <Form.Floating>\n                            <Form.Control\n                                id=\"floatinSessionCustom\"\n                                placeholder=\"Password\"\n                                type=\"text\"\n                                className={`title input`}\n                                placeholder=\"Session minutes (default: 25)\"\n                                name=\"session\"\n                            />\n                            <label className=\"label\" htmlFor=\"floatingSessionCustom\">Session minutes (default: 25)</label>\n                        </Form.Floating>\n                        <Form.Floating>\n                            <Form.Control\n                                id=\"floatinSessionCustom\"\n                                placeholder=\"Password\"\n                                type=\"text\"\n                                className={`title input mt-2`}\n                                placeholder=\"Break minutes (default: 5)\"\n                                name=\"break\"\n                            />\n                            <label className=\"label\" htmlFor=\"floatingSessionCustom\">Break minutes (default: 5)</label>\n                        </Form.Floating>\n                    </Col>\n                </Row>\n                <Col className=\"d-flex justify-content-center mt-2\">\n                    <ButtonGroup>\n                        <Button\n                            onClick={() => {\n                            }}\n                            className=\"button\"\n                            type=\"submit\"\n                            size=\"sm\"\n                            variant=\"secondary\"\n                        >\n                            Save\n                        </Button>\n                        <Button\n                            onClick={() => {\n                                handleReset()\n                            }}\n                            className=\"delete\"\n                            type=\"button\"\n                            size=\"sm\"\n                            variant=\"secondary\"\n                        >\n                            Reset\n                        </Button>\n                    </ButtonGroup>\n                </Col>\n                <Col className=\"d-flex justify-content-center\">\n                    <Button\n                        onClick={() => {\n                            handleStart()\n                        }}\n                        className=\"d-flex justify-content-center mt-2\"\n                        type=\"button\"\n                        size=\"sm\"\n                        variant=\"primary\"\n                    >\n                        Start Timer\n                    </Button>\n                </Col>\n            </Form>\n        </>\n    )\n}","import { useState} from \"react\";\nimport {\n    OverlayTrigger,\n    Tooltip,\n    Modal,\n    Button\n} from 'react-bootstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faStopwatch } from '@fortawesome/free-solid-svg-icons'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport \"./App.css\";\nimport Pomodoro from \"./Pomodoro\";\n\nfunction TimerModal() {\n    const [show, setShow] = useState(false);\n\n    const handleClose = () => setShow(false);\n    const handleShow = () => setShow(true);\n\n    return (\n        <>\n            <OverlayTrigger placement=\"bottom\" overlay={<Tooltip id=\"tooltip-disabled\">Start New Pomodoro Timer</Tooltip>}>\n                <div className=\"timer\" onClick={handleShow}>\n                    <FontAwesomeIcon icon={faStopwatch} />\n                </div>\n            </OverlayTrigger>\n\n            <Modal show={show} onHide={handleClose}>\n                <Modal.Header closeButton>\n                    <Modal.Title>Pomodoro Timer</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <Pomodoro />\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button variant=\"secondary\" onClick={handleClose}>\n                        Close\n                    </Button>\n                </Modal.Footer>\n            </Modal>\n        </>\n    );\n}\n\nexport default TimerModal;","import { useState, useEffect } from \"react\";\nimport { Container, Row, Col} from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport \"./App.css\";\nimport TaskCol from './TaskCol';\nimport TimerModal from \"./TimerModal\";\n\nfunction App() {\n  const [tasks, setTasks] = useState([]);\n\n  useEffect(() => {\n    loadTasksFromLocalStorage();\n  }, []);\n\n  function addEmptyTask(status) {\n    const lastTask = tasks[tasks.length - 1];\n\n    let newTaskId = 1;\n\n    if (lastTask !== undefined) {\n      newTaskId = lastTask.id + 1;\n    }\n\n    setTasks((tasks) => [\n      ...tasks,\n      {\n        id: newTaskId,\n        title: \"\",\n        description: \"\",\n        urgency: \"\",\n        status: status,\n      },\n    ]);\n  }\n\n  function addTask(taskToAdd) {\n    let filteredTasks = tasks.filter((task) => {\n      return task.id !== taskToAdd.id;\n    });\n\n    let newTaskList = [...filteredTasks, taskToAdd];\n\n    setTasks(newTaskList);\n\n    saveTasksToLocalStorage(newTaskList);\n  }\n\n  function deleteTask(taskId) {\n    let filteredTasks = tasks.filter((task) => {\n      return task.id !== taskId;\n    });\n\n    setTasks(filteredTasks);\n\n    saveTasksToLocalStorage(filteredTasks);\n  }\n\n  function moveTask(id, newStatus) {\n    let task = tasks.filter((task) => {\n      return task.id === id;\n    })[0];\n\n    let filteredTasks = tasks.filter((task) => {\n      return task.id !== id;\n    });\n\n    task.status = newStatus;\n\n    let newTaskList = [...filteredTasks, task];\n\n    setTasks(newTaskList);\n\n    saveTasksToLocalStorage(newTaskList);\n  }\n\n  function saveTasksToLocalStorage(tasks) {\n    localStorage.setItem(\"tasks\", JSON.stringify(tasks));\n  }\n\n  function loadTasksFromLocalStorage() {\n    let loadedTasks = localStorage.getItem(\"tasks\");\n\n    let tasks = JSON.parse(loadedTasks);\n\n    if (tasks) {\n      setTasks(tasks);\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <h1 className=\"app-name mt-3 mb-3\"> ProEfficiency </h1>\n      <TimerModal/>\n      <main>\n        <Container>\n          <Row>\n            <Col>\n              <TaskCol\n                tasks={tasks}\n                addEmptyTask={addEmptyTask}\n                addTask={addTask}\n                deleteTask={deleteTask}\n                moveTask={moveTask}\n                status=\"Backlog\"\n              />\n            </Col>\n            <Col>\n              <TaskCol\n                tasks={tasks}\n                addEmptyTask={addEmptyTask}\n                addTask={addTask}\n                deleteTask={deleteTask}\n                moveTask={moveTask}\n                status=\"In Progress\"\n              />\n            </Col>\n            <Col>\n              <TaskCol\n                tasks={tasks}\n                addEmptyTask={addEmptyTask}\n                addTask={addTask}\n                deleteTask={deleteTask}\n                moveTask={moveTask}\n                status=\"Complete\"\n              />\n            </Col>\n          </Row>\n        </Container>\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}